{"version":3,"sources":["Graph.js","Variables.js","Grower.js","calculateMonthlyValues.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","wealth","maxVal","title","useState","mouseoverText","setMouseOverText","map","money","idx","onMouseOver","Math","floor","Intl","NumberFormat","style","currency","format","display","width","height","min","backgroundColor","borderLeft","Variables","children","variables","Description","val","type","Inflation","urlVars","JSON","parse","decodeURI","window","location","hash","substr","e","Object","entries","reduce","acc","varName","varDescription","varVals","setVarVals","useEffect","encodedVars","encodeURI","stringify","Grid","container","spacing","item","xs","TextField","id","label","fullWidth","value","onChange","event","target","name","parseFloat","Error","Grower","initialValue","growthPerPeriod","this","count","max","Mortgage","monthlyPayment","amount","rate","monthsElapsed","amountOwed","interestPayed","calculateMonthlyValues","getVarVal","growers","stock","monthlyCostOfLiving","mortgage","rentalIncome","homeValue","propertyTaxPerMonth","maintenancePerMonth","Array","MONTHS","fill","values","forEach","grower","tick","totalExpenses","totalIncome","add","liquid","netWorth","filter","month","App","className","padding","months","keys","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33de9d2b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n// style\nconst BAR_WIDTH = 1;\n\nconst Graph = ({ wealth, maxVal = 4000000, title }) => {\n  const [mouseoverText, setMouseOverText] = useState(\"\");\n\n  return (\n    <>\n      <h2>{title}</h2>\n      {wealth.map((money, idx) => (\n        <div\n          onMouseOver={() =>\n            setMouseOverText(\n              `Year: ${Math.floor(idx / 12)} ${new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: \"USD\",\n              }).format(money)}`\n            )\n          }\n          key={idx}\n          style={{\n            display: \"inline-block\",\n            width: `${BAR_WIDTH}px`,\n            height: `${(100 * Math.min(money, maxVal)) / maxVal}px`,\n            backgroundColor: idx % 12 === 0 ? \"#ff8400\" : \"#cccccc\",\n            borderLeft: \"solid 1px #ffffff\",\n          }}\n        ></div>\n      ))}\n\n      <div>{mouseoverText}</div>\n\n      <div>\n        <br />\n        <br />\n      </div>\n    </>\n  );\n};\n\nGraph.propTypes = {\n  wealth: PropTypes.array,\n  maxVal: PropTypes.number,\n  title: PropTypes.string,\n};\n\nexport default Graph;\n","import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PropTypes from \"prop-types\";\n\nconst Variables = ({ children }) => {\n  const variables = {\n    Description: { val: \"Enter description here\", type: \"freeText\" },\n    \"Inl Stock Value\": { val: 500000 },\n    \"Home Purchase Price\": { val: 1000000 },\n    \"House Appreciation\": { val: 0.03 },\n    Inflation: { val: 0.03 },\n    \"Stock Market Return\": { val: 0.06 },\n    \"Monthly Rent Collected\": { val: 2000 },\n\n    \"Down Payment\": { val: 200000 },\n    \"Household Expenses\": { val: 4500 },\n    \"Yearly Health Ins\": { val: 18000 },\n    \"Income Tax on Rent\": { val: 0.2 },\n    \"Property Tax Rate\": { val: 0.015 },\n    \"Mortgage Payment\": { val: 4000 },\n    \"Annual Maintenance % of Value\": { val: 0.005 },\n  };\n\n  const urlVars = (() => {\n    try {\n      return JSON.parse(decodeURI(window.location.hash).substr(1));\n    } catch (e) {\n      return {};\n    }\n  })();\n\n  const [varVals, setVarVals] = useState({\n    ...Object.entries(variables).reduce((acc, [varName, varDescription]) => {\n      return {\n        ...acc,\n        [varName]: varDescription.val,\n      };\n    }, {}),\n    ...urlVars,\n  });\n\n  useEffect(() => {\n    const encodedVars = encodeURI(JSON.stringify(varVals));\n    window.location.hash = encodedVars;\n  });\n\n  const getVarVal = (name) => {\n    if (name in varVals) {\n      return parseFloat(varVals[name]);\n    } else {\n      throw new Error(`no var named ${name} defined`);\n    }\n  };\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        {Object.entries(variables).map(([varName, val]) => {\n          return (\n            <Grid item xs={val.type === \"freeText\" ? 12 : 2} key={varName}>\n              <TextField\n                id=\"standard-basic\"\n                label={varName}\n                fullWidth={val.type === \"freeText\"}\n                value={varVals[varName]}\n                onChange={(event) =>\n                  setVarVals({ ...varVals, [varName]: event.target.value })\n                }\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n      {children(getVarVal)}\n    </>\n  );\n};\n\nVariables.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default Variables;\n","class Grower {\n  constructor({ initialValue, growthPerPeriod }) {\n    if (typeof growthPerPeriod === \"undefined\") {\n      throw new Error(\"growthPerPeriod is required for growers\");\n    }\n\n    if (typeof initialValue === \"undefined\") {\n      throw new Error(\"initialValue is required for growers\");\n    }\n\n    this.initialValue = initialValue;\n    this.value = initialValue;\n    this.growthPerPeriod = growthPerPeriod;\n    this.count = 0;\n  }\n  tick() {\n    this.count++;\n    this.value = Math.max(0, this.value * (1 + this.growthPerPeriod));\n  }\n  add(value) {\n    this.value += value;\n  }\n  subtract(value) {\n    this.value -= value;\n  }\n}\n\nexport default Grower;\n","import Grower from \"./Grower\";\n\nconst MONTHS = 12;\n\nconst YEARS = 55;\n\nclass Mortgage {\n  constructor({ monthlyPayment, amount, rate }) {\n    this.monthsElapsed = 0;\n    this.monthlyPayment = monthlyPayment;\n    this.amountOwed = amount;\n    this.rate = rate;\n  }\n  tick() {\n    const YEARS_OF_MORTGAGE = 30;\n    if (this.monthsElapsed++ < 12 * YEARS_OF_MORTGAGE) {\n      this.value = this.monthlyPayment;\n\n      const interestPayed = (this.amountOwed * this.rate) / 12;\n      this.amountOwed = Math.max(\n        0,\n        this.amountOwed - (this.value - interestPayed)\n      );\n    } else {\n      this.value = 0;\n    }\n  }\n}\n\nconst calculateMonthlyValues = ({ getVarVal }) => {\n  const growers = {\n    stock: new Grower({\n      initialValue: getVarVal(\"Inl Stock Value\") - getVarVal(\"Down Payment\"),\n      growthPerPeriod: getVarVal(\"Stock Market Return\") / 12,\n    }),\n    monthlyCostOfLiving: new Grower({\n      initialValue:\n        getVarVal(\"Household Expenses\") + getVarVal(\"Yearly Health Ins\") / 12,\n      growthPerPeriod: getVarVal(\"Inflation\") / 12,\n    }),\n    mortgage: new Mortgage({\n      rate: 0.03,\n      amount: getVarVal(\"Home Purchase Price\") - getVarVal(\"Down Payment\"),\n      monthlyPayment: getVarVal(\"Mortgage Payment\"),\n    }),\n    rentalIncome: new Grower({\n      initialValue: getVarVal(\"Monthly Rent Collected\"),\n      growthPerPeriod: getVarVal(\"Inflation\") / 12,\n    }),\n    homeValue: new Grower({\n      initialValue: getVarVal(\"Home Purchase Price\"),\n      growthPerPeriod: getVarVal(\"House Appreciation\") / 12,\n    }),\n    propertyTaxPerMonth: new Grower({\n      initialValue:\n        (getVarVal(\"Home Purchase Price\") * getVarVal(\"Property Tax Rate\")) /\n        MONTHS,\n      growthPerPeriod: getVarVal(\"Inflation\") / 12,\n    }),\n    maintenancePerMonth: new Grower({\n      initialValue:\n        (getVarVal(\"Home Purchase Price\") *\n          getVarVal(\"Annual Maintenance % of Value\")) /\n        MONTHS,\n      growthPerPeriod: getVarVal(\"Inflation\") / 12,\n    }),\n  };\n\n  const months = new Array(MONTHS * YEARS).fill(0).map(() => {\n    Object.values(growers).forEach((grower) => grower.tick());\n\n    const totalExpenses =\n      growers.monthlyCostOfLiving.value +\n      growers.mortgage.value +\n      growers.propertyTaxPerMonth.value +\n      growers.maintenancePerMonth.value;\n\n    const totalIncome =\n      growers.rentalIncome.value * (1 - getVarVal(\"Income Tax on Rent\"));\n\n    growers.stock.add(totalIncome - totalExpenses);\n\n    return {\n      liquid: Math.max(0, growers.stock.value),\n      homeValue: growers.homeValue.value,\n      amountOwed: growers.mortgage.amountOwed,\n      netWorth:\n        Math.max(0, growers.stock.value) +\n        growers.homeValue.value -\n        growers.mortgage.amountOwed,\n    };\n  });\n\n  return months.filter((month) => month.liquid > 0);\n};\n\nexport default calculateMonthlyValues;\n","import React from \"react\";\nimport \"./App.css\";\nimport Graph from \"./Graph\";\nimport Variables from \"./Variables\";\nimport calculateMonthlyValues from \"./calculateMonthlyValues\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ padding: `20px` }}>\n      <Variables>\n        {(getVarVal) => {\n          const months = calculateMonthlyValues({ getVarVal });\n          return Object.keys(months[0]).map((key) => {\n            // eslint-disable-next-line\n            debugger;\n            return (\n              <Graph\n                title={key}\n                key={key}\n                wealth={months.map((month) => month[key])}\n              />\n            );\n          });\n        }}\n      </Variables>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
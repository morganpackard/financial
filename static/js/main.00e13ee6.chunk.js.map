{"version":3,"sources":["Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","wealth","maxStocks","reduce","val","acc","map","money","idx","style","display","width","height","backgroundColor","borderLeft","Intl","NumberFormat","currency","format","Grower","initialValue","growthPerYear","this","value","Mortgage","monthlyPayment","monthsElapsed","variables","Description","type","Inflation","App","urlVars","JSON","parse","decodeURI","window","location","hash","substr","e","useState","Object","entries","varName","varDescription","varVals","setVarVals","useEffect","encodedVars","encodeURI","stringify","getVarVal","name","parseFloat","Error","growers","stock","monthlyCostOfLiving","mortgage","rentCollected","homeValue","moneyOwedOnHouse","Array","MONTHS","fill","month","interestPayment","principlePayment","Math","max","values","forEach","grower","tick","homeSaleMonth","income","monthlyCashFlow","add","calculateStocks","className","padding","Grid","container","spacing","item","xs","TextField","id","label","fullWidth","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00e13ee6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// style\nconst BAR_WIDTH = 1;\n\nconst Graph = ({ wealth }) => {\n  const maxStocks = wealth.reduce((val, acc) => (val > acc ? val : acc), 0);\n\n  return (\n    <>\n      {wealth.map((money, idx) => (\n        <div\n          key={idx}\n          style={{\n            display: \"inline-block\",\n            width: `${BAR_WIDTH}px`,\n            height: `${(100 * money) / maxStocks}px`,\n            backgroundColor: \"#cccccc\",\n            borderLeft: \"solid 1px #ffffff\",\n          }}\n        ></div>\n      ))}\n\n      <div>\n        Max:{\" \"}\n        {new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(maxStocks)}\n      </div>\n    </>\n  );\n};\n\nGraph.propTypes = {\n  wealth: PropTypes.object,\n};\n\nexport default Graph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Graph from \"./Graph\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst MONTHS = 12;\n\nconst YEARS = 55;\n\nclass Grower {\n  constructor({ initialValue, growthPerYear }) {\n    this.value = initialValue;\n    this.growthPerYear = growthPerYear;\n  }\n  tick() {\n    this.value = this.value + (this.value * this.growthPerYear) / 12;\n  }\n  add(value) {\n    this.value += value;\n  }\n  subtract(value) {\n    this.value -= value;\n  }\n}\n\nclass Mortgage {\n  constructor({ monthlyPayment }) {\n    this.monthsElapsed = 0;\n    this.monthlyPayment = monthlyPayment;\n  }\n  tick() {\n    const YEARS_OF_MORTGAGE = 30;\n    if (this.monthsElapsed++ < 12 * YEARS_OF_MORTGAGE) {\n      this.value = this.monthlyPayment;\n    } else {\n      this.value = 0;\n    }\n  }\n}\n\nconst variables = {\n  Description: { val: \"Enter description here\", type: \"freeText\" },\n  \"Inl Stock Value\": { val: 500000 },\n  \"Home Purchase Price\": { val: 1000000 },\n  \"House Appreciation\": { val: 0.03 },\n  Inflation: { val: 0.03 },\n  \"Stock Market Return\": { val: 0.06 },\n  \"Monthly Rent Collected\": { val: 2000 },\n\n  \"Down Payment\": { val: 200000 },\n  \"Household Expenses\": { val: 4500 },\n  \"Yearly Health Ins\": { val: 18000 },\n  \"Income Tax on Rent\": { val: 0.2 },\n  \"Property Tax Rate\": { val: 0.015 },\n  \"Tax Rate on Stock Sale\": { val: 0.2 },\n  \"Mortgage Payment\": { val: 4000 },\n  \"Annual Maintenance % of Value\": { val: 0.005 },\n  \"Years of Ownership\": { val: 30 },\n};\n\nfunction App() {\n  const urlVars = (() => {\n    try {\n      return JSON.parse(decodeURI(window.location.hash).substr(1));\n    } catch (e) {\n      return {};\n    }\n  })();\n\n  const [varVals, setVarVals] = useState({\n    ...Object.entries(variables).reduce((acc, [varName, varDescription]) => {\n      return {\n        ...acc,\n        [varName]: varDescription.val,\n      };\n    }, {}),\n    ...urlVars,\n  });\n\n  useEffect(() => {\n    const encodedVars = encodeURI(JSON.stringify(varVals));\n    window.location.hash = encodedVars;\n  });\n\n  const getVarVal = (name) => {\n    if (name in varVals) {\n      return parseFloat(varVals[name]);\n    } else {\n      throw new Error(`no var named ${name} defined`);\n    }\n  };\n\n  const growers = {\n    stock: new Grower({\n      initialValue: getVarVal(\"Inl Stock Value\") - getVarVal(\"Down Payment\"),\n      growthPerYear: getVarVal(\"Stock Market Return\"),\n    }),\n    monthlyCostOfLiving: new Grower({\n      initialValue:\n        getVarVal(\"Household Expenses\") + getVarVal(\"Yearly Health Ins\") / 12,\n      growthPerYear: getVarVal(\"Inflation\"),\n    }),\n    mortgage: new Mortgage({ monthlyPayment: getVarVal(\"Mortgage Payment\") }),\n    rentCollected: new Grower({\n      initialValue: getVarVal(\"Monthly Rent Collected\"),\n      growthPerYear: 0.02,\n    }),\n    homeValue: new Grower({\n      initialValue: getVarVal(\"Home Purchase Price\"),\n      growthPerYear: getVarVal(\"House Appreciation\"),\n    }),\n  };\n\n  let moneyOwedOnHouse =\n    getVarVal(\"Home Purchase Price\") - getVarVal(\"Down Payment\");\n\n  const wealth = new Array(MONTHS * YEARS).fill(0).map((val, month) => {\n    const INTEREST_RATE = 0.03;\n    const interestPayment = (moneyOwedOnHouse * INTEREST_RATE) / MONTHS;\n    const principlePayment = getVarVal(\"Mortgage Payment\") - interestPayment;\n    moneyOwedOnHouse -= principlePayment;\n\n    // stock value\n    const calculateStocks = () => {\n      Object.values(growers).forEach((grower) => grower.tick());\n\n      const homeSaleMonth = getVarVal(\"Years of Ownership\") * MONTHS;\n\n      const income =\n        (month <= homeSaleMonth ? growers.rentCollected.value : 0) +\n        (month === homeSaleMonth\n          ? growers.homeValue.value - moneyOwedOnHouse\n          : 0);\n      const expenses =\n        growers.monthlyCostOfLiving.value +\n        (month <= homeSaleMonth ? growers.mortgage.value : 0) +\n        (month <= homeSaleMonth\n          ? income * getVarVal(\"Income Tax on Rent\")\n          : 0) +\n        (growers.homeValue.value * getVarVal(\"Annual Maintenance % of Value\")) /\n          12 +\n        (growers.homeValue.value * getVarVal(\"Property Tax Rate\")) / 12;\n\n      const monthlyCashFlow = income - expenses;\n\n      growers.stock.add(\n        monthlyCashFlow +\n          (monthlyCashFlow < 0\n            ? monthlyCashFlow * getVarVal(\"Tax Rate on Stock Sale\")\n            : 0)\n      );\n\n      return growers.stock.value;\n    };\n\n    return Math.max(0, calculateStocks());\n  });\n\n  return (\n    <div className=\"App\" style={{ padding: `20px` }}>\n      <Grid container spacing={2}>\n        {Object.entries(variables).map(([varName, val]) => {\n          return (\n            <Grid item xs={val.type === \"freeText\" ? 12 : 2} key={varName}>\n              <TextField\n                id=\"standard-basic\"\n                label={varName}\n                fullWidth={val.type === \"freeText\"}\n                value={varVals[varName]}\n                onChange={(event) =>\n                  setVarVals({ ...varVals, [varName]: event.target.value })\n                }\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n      <div>\n        <br />\n        <br />\n        total cash after home sale:\n        {new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(wealth[getVarVal(\"Years of Ownership\") * 12])}\n        <br />\n        <br />\n      </div>\n      <Graph wealth={wealth} />\n      <br />\n      <br />\n      Disclaimers: There are probably bugs in this thing! For now, just pay\n      attention UP TO the point of selling the house. I think I am m still\n      subtracting property tax after the sale of the house.\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}